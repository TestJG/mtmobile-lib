export declare type Parser<T = any, U = string> = (text: U) => T;
export declare type Formatter<T = any, U = string> = (source: T) => U;
export declare const stringParser: Parser<string>;
export declare const stringFormatter: Formatter<string>;
export declare const numberParser: Parser<number>;
export declare const integerParser: (radix: number) => Parser<number, string>;
export declare const decimalParser: Parser<number, string>;
export declare const numberRadixFormatter: (radix?: number) => Formatter<number, string>;
export declare const numberFormatter: Formatter<number, string>;
export declare const numberPrecisionFormatter: (precision?: number) => Formatter<number, string>;
export declare const numberFixedFormatter: (digits?: number) => Formatter<number, string>;
export declare const numberExponentialFormatter: (fractionDigits?: number) => Formatter<number, string>;
export declare const numberLocaleFormatter: (locales?: string | string[], options?: Intl.NumberFormatOptions) => Formatter<number, string>;
export declare const decimalFormatter: Formatter<number, string>;
export declare const getParserFor: (value: any) => Parser<any, string>;
export declare const getFormatterFor: (value: any) => Formatter<any, string>;
