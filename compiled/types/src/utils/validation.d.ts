import { ValueOrFunc } from './common';
export declare type EasyValidationResult = string | string[];
export declare type EasyValidator<T = any> = (value: T) => EasyValidationResult;
export declare type ValidatorInit<T = any> = EasyValidator<T> | EasyValidator<T>[];
export declare type ValidationResult = string[];
export declare type Validator<T = any> = (value: T) => ValidationResult;
export declare type MessageSource = ValueOrFunc<string | string[]> | undefined;
export declare const emptyValidator: <T>(value: T) => any[];
export declare const setValidationMessages: (messages: Partial<{
    validatorResultErrorMessage: ValueOrFunc<string>;
    shouldBeAString: ValueOrFunc<string>;
    shouldNotBeEmpty: ValueOrFunc<string>;
    shouldNotBeBlank: ValueOrFunc<string>;
    shouldMatch: (pattern: RegExp) => ValueOrFunc<string>;
    shouldNotMatch: (pattern: RegExp) => ValueOrFunc<string>;
    shouldNotBeShorterThan: (length: number) => ValueOrFunc<string>;
    shouldBeShorterThan: (length: number) => ValueOrFunc<string>;
    shouldNotBeLongerThan: (length: number) => ValueOrFunc<string>;
    shouldBeLongerThan: (length: number) => ValueOrFunc<string>;
    shouldBeANumber: ValueOrFunc<string>;
    shouldBeGreaterThan: (value: number) => ValueOrFunc<string>;
    shouldBeGreaterThanOrEqualTo: (value: number) => string;
    shouldBeLessThan: (value: number) => string;
    shouldBeLessThanOrEqualTo: (value: number) => string;
    shouldBeBetweenValues: (minValue: number, maxValue: number) => string;
    shouldNotBeGreaterThan: (value: number) => string;
    shouldNotBeGreaterThanOrEqualTo: (value: number) => string;
    shouldNotBeLessThan: (value: number) => string;
    shouldNotBeLessThanOrEqualTo: (value: number) => string;
    shouldNotBeBetweenValues: (minValue: number, maxValue: number) => string;
    shouldBeAnArray: string;
    shouldNotBeAnEmptyArray: string;
    shouldNotBeAnArrayShorterThan: (length: number) => string;
    shouldBeAnArrayShorterThan: (length: number) => string;
    shouldNotBeAnArrayLongerThan: (length: number) => string;
    shouldBeAnArrayLongerThan: (length: number) => string;
}>) => void;
export declare const makeValidator: <T>(val: EasyValidator<T>) => Validator<T>;
export declare const mergeValidators: <T>(validators?: ValidatorInit<T>) => (value: T) => any[];
export declare const checkCondition: <T>(validCondition: (v: T) => boolean, defaultMessage: ValueOrFunc<string | string[]>, message?: ValueOrFunc<string | string[]>, args?: any[]) => Validator<T>;
export declare const validateEvery: <T>(...validators: Validator<T>[]) => Validator<T>;
export declare const validateSome: <T>(...validators: Validator<T>[]) => Validator<T>;
export declare const shouldBe: <T>(validCondition: (v: T) => boolean, message: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<T>;
export declare const shouldNotBe: <T>(validCondition: (v: T) => boolean, message: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<T>;
export declare const shouldBeAString: (message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldNotBeEmpty: (message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldNotBeBlank: (message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldMatch: (pattern: RegExp, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldNotMatch: (pattern: RegExp, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldNotBeShorterThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldBeShorterThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldNotBeLongerThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldBeLongerThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<string>;
export declare const shouldBeANumber: (message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldBeGreaterThan: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldBeGreaterThanOrEqualTo: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldBeLessThan: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldBeLessThanOrEqualTo: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldBeBetweenValues: (minValue: number, maxValue: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldNotBeGreaterThan: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldNotBeGreaterThanOrEqualTo: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldNotBeLessThan: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldNotBeLessThanOrEqualTo: (value: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldNotBeBetweenValues: (minValue: number, maxValue: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<number>;
export declare const shouldBeAnArray: (message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<any[]>;
export declare const shouldNotBeAnEmptyArray: (message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<any[]>;
export declare const shouldNotBeAnArrayShorterThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<any[]>;
export declare const shouldBeAnArrayShorterThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<any[]>;
export declare const shouldNotBeAnArrayLongerThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<any[]>;
export declare const shouldBeAnArrayLongerThan: (length: number, message?: ValueOrFunc<string | string[]>, ...args: any[]) => Validator<any[]>;
